from flask import Flask, render_template, request, jsonify, session, redirect, url_for
import sqlite3
import requests
import os
import threading
import time
from datetime import datetime

app = Flask(__name__)
app.secret_key = 'your-secret-key-here'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–ª—É—á–∞–π–Ω—ã–π –∫–ª—é—á

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram –±–æ—Ç–∞
TELEGRAM_TOKEN = os.environ.get('TELEGRAM_TOKEN', 'YOUR_BOT_TOKEN')
TELEGRAM_API_URL = f'https://api.telegram.org/bot{TELEGRAM_TOKEN}'
TELEGRAM_CHAT_ID = os.environ.get('TELEGRAM_CHAT_ID', 'YOUR_CHAT_ID')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('database.db')
    c = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–≥—Ä–∞–º–º
    c.execute('''CREATE TABLE IF NOT EXISTS programs
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  name TEXT NOT NULL,
                  category TEXT NOT NULL,
                  description TEXT,
                  version TEXT,
                  download_link TEXT,
                  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
    
    # –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    c.execute('''CREATE TABLE IF NOT EXISTS messages
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  name TEXT NOT NULL,
                  email TEXT,
                  message TEXT NOT NULL,
                  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                  replied BOOLEAN DEFAULT FALSE)''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    c.execute('''CREATE TABLE IF NOT EXISTS admins
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  username TEXT UNIQUE NOT NULL,
                  password_hash TEXT NOT NULL)''')
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–ø–∞—Ä–æ–ª—å: admin123)
    try:
        c.execute("INSERT INTO admins (username, password_hash) VALUES (?, ?)",
                 ('admin', 'pbkdf2:sha256:260000$...'))  # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —Ö–µ—à–∏—Ä—É–π—Ç–µ –ø–∞—Ä–æ–ª—å!
    except sqlite3.IntegrityError:
        pass
    
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
def send_telegram_message(chat_id, text):
    try:
        url = f'{TELEGRAM_API_URL}/sendMessage'
        payload = {
            'chat_id': chat_id,
            'text': text,
            'parse_mode': 'HTML'
        }
        response = requests.post(url, json=payload, timeout=10)
        return response.status_code == 200
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
        return False

# –ú–∞—Ä—à—Ä—É—Ç—ã —Å–∞–π—Ç–∞
@app.route('/')
def index():
    conn = sqlite3.connect('database.db')
    c = conn.cursor()
    c.execute("SELECT * FROM programs ORDER BY created_at DESC LIMIT 6")
    programs = c.fetchall()
    conn.close()
    
    return render_template('index.html', programs=programs)

@app.route('/programs')
def programs():
    category = request.args.get('category', 'all')
    conn = sqlite3.connect('database.db')
    c = conn.cursor()
    
    if category == 'all':
        c.execute("SELECT * FROM programs ORDER BY name")
    else:
        c.execute("SELECT * FROM programs WHERE category = ? ORDER BY name", (category,))
    
    programs = c.fetchall()
    conn.close()
    
    return render_template('programs.html', programs=programs, category=category)

@app.route('/contact', methods=['GET', 'POST'])
def contact():
    if request.method == 'POST':
        name = request.form['name']
        email = request.form['email']
        message = request.form['message']
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        conn = sqlite3.connect('database.db')
        c = conn.cursor()
        c.execute("INSERT INTO messages (name, email, message) VALUES (?, ?, ?)",
                 (name, email, message))
        conn.commit()
        conn.close()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        telegram_msg = f"üì© <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {name}</b>\n\n"
        telegram_msg += f"Email: {email}\n"
        telegram_msg += f"–°–æ–æ–±—â–µ–Ω–∏–µ: {message[:200]}..."
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç
        threading.Thread(target=send_telegram_message, 
                        args=(TELEGRAM_CHAT_ID, telegram_msg)).start()
        
        return render_template('contact.html', success=True)
    
    return render_template('contact.html', success=False)

# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
@app.route('/admin/login', methods=['GET', 'POST'])
def admin_login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ!)
        if username == 'admin' and password == 'admin123':
            session['admin_logged_in'] = True
            return redirect(url_for('admin_dashboard'))
        
        return render_template('admin_login.html', error=True)
    
    return render_template('admin_login.html', error=False)

@app.route('/admin/dashboard')
def admin_dashboard():
    if not session.get('admin_logged_in'):
        return redirect(url_for('admin_login'))
    
    conn = sqlite3.connect('database.db')
    c = conn.cursor()
    
    c.execute("SELECT COUNT(*) FROM programs")
    program_count = c.fetchone()[0]
    
    c.execute("SELECT COUNT(*) FROM messages WHERE replied = FALSE")
    unread_messages = c.fetchone()[0]
    
    c.execute("SELECT * FROM messages ORDER BY created_at DESC LIMIT 10")
    recent_messages = c.fetchall()
    
    conn.close()
    
    return render_template('admin_dashboard.html',
                         program_count=program_count,
                         unread_messages=unread_messages,
                         messages=recent_messages)

@app.route('/admin/programs')
def admin_programs():
    if not session.get('admin_logged_in'):
        return redirect(url_for('admin_login'))
    
    conn = sqlite3.connect('database.db')
    c = conn.cursor()
    c.execute("SELECT * FROM programs ORDER BY created_at DESC")
    programs = c.fetchall()
    conn.close()
    
    return render_template('admin_programs.html', programs=programs)

@app.route('/admin/add-program', methods=['GET', 'POST'])
def add_program():
    if not session.get('admin_logged_in'):
        return redirect(url_for('admin_login'))
    
    if request.method == 'POST':
        name = request.form['name']
        category = request.form['category']
        description = request.form['description']
        version = request.form['version']
        download_link = request.form['download_link']
        
        conn = sqlite3.connect('database.db')
        c = conn.cursor()
        c.execute("INSERT INTO programs (name, category, description, version, download_link) VALUES (?, ?, ?, ?, ?)",
                 (name, category, description, version, download_link))
        conn.commit()
        conn.close()
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –æ –Ω–æ–≤–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ
        telegram_msg = f"üÜï <b>–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞!</b>\n\n"
        telegram_msg += f"<b>{name}</b> v{version}\n"
        telegram_msg += f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
        telegram_msg += f"–û–ø–∏—Å–∞–Ω–∏–µ: {description[:100]}...\n\n"
        telegram_msg += f"–°–∫–∞—á–∞—Ç—å: {download_link}"
        
        threading.Thread(target=send_telegram_message, 
                        args=(TELEGRAM_CHAT_ID, telegram_msg)).start()
        
        return redirect(url_for('admin_programs'))
    
    return render_template('add_program.html')

# Webhook –¥–ª—è Telegram –±–æ—Ç–∞
@app.route('/webhook', methods=['POST'])
def webhook():
    data = request.get_json()
    
    if 'message' in data:
        message = data['message']
        chat_id = message['chat']['id']
        text = message.get('text', '').lower()
        
        if text == '/start':
            send_telegram_message(chat_id, 
                "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–∞–π—Ç–∞ PrankVzlom.\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/programs - –°–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º\n"
                "/contact - –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏\n"
                "/help - –ü–æ–º–æ—â—å")
        
        elif text == '/programs':
            conn = sqlite3.connect('database.db')
            c = conn.cursor()
            c.execute("SELECT name, category, version FROM programs ORDER BY name")
            programs = c.fetchall()
            conn.close()
            
            response = "üì¶ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã:</b>\n\n"
            for program in programs:
                response += f"‚Ä¢ {program[0]} v{program[2]} ({program[1]})\n"
            
            send_telegram_message(chat_id, response)
        
        elif text == '/contact':
            send_telegram_message(chat_id,
                "üìû <b>–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏:</b>\n\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –Ω–∞ —Å–∞–π—Ç–µ: https://your-site.com/contact\n"
                "–ò–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –º—ã –≤–∞–º –æ—Ç–≤–µ—Ç–∏–º!")
    
    return 'OK'

if __name__ == '__main__':
    init_db()
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port, debug=True)